---
title: "Course Roadmap"
format:
  html:
    include-in-header:
      text: |
        <script>
        document.addEventListener("DOMContentLoaded", function() {
          const courseGrid = document.getElementById("course-grid");
          const prevPageBtn = document.getElementById("prev-page");
          const nextPageBtn = document.getElementById("next-page");
          const pageInfo = document.getElementById("page-info");
          const resetButton = document.getElementById("reset-button");
          const levelFilter = document.getElementById("level-filter");
          const buckets = document.querySelectorAll(".bucket");

          let currentPage = 1;
          const coursesPerPage = parseInt(courseGrid.getAttribute("data-courses-per-page"));
          const courses = JSON.parse(courseGrid.getAttribute("data-course-list"));
          const descriptions = JSON.parse(courseGrid.getAttribute("data-description-list"));
          const levels = JSON.parse(courseGrid.getAttribute("data-level-list"));

          // Store initial state for reset
          const initialBuckets = Array.from(buckets).map(bucket => bucket.innerHTML);
          const initialFilteredIndices = courses.map((_, i) => i);
          let filteredIndices = [...initialFilteredIndices];

          function updatePage() {
            const totalCourses = filteredIndices.length;
            const totalPages = Math.ceil(totalCourses / coursesPerPage);
            const startIdx = (currentPage - 1) * coursesPerPage;
            const endIdx = Math.min(startIdx + coursesPerPage, totalCourses);

            courseGrid.innerHTML = "";
            for (let i = startIdx; i < endIdx; i++) {
              const courseIndex = filteredIndices[i];
              const courseDiv = document.createElement("div");
              courseDiv.setAttribute("draggable", "true");
              courseDiv.classList.add("course");
              courseDiv.style.cssText = 'width: 150px; height: auto; border: 1px solid #ccc; padding: 0.5rem; border-radius: 4px; background-color: #fff; text-align: center; cursor: grab; font-size: 0.8rem; word-wrap: break-word; white-space: normal; position: relative;';

              courseDiv.addEventListener("mouseenter", () => {
                const infoBox = document.createElement("div");
                infoBox.style.cssText = 'width: 300px; position: absolute; top: 100%; left: 50%; transform: translateX(-50%); background-color: #fff; border: 1px solid #ccc; padding: 0.5rem; border-radius: 4px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); z-index: 10; white-space: normal;';
                infoBox.innerHTML = `<strong>Description:</strong> ${descriptions[courseIndex]} <br><strong>Credits:</strong> 3`;
                courseDiv.appendChild(infoBox);
              });

              courseDiv.addEventListener("mouseleave", () => {
                const infoBox = courseDiv.querySelector("div");
                if (infoBox) infoBox.remove();
              });

              courseDiv.textContent = courses[courseIndex];
              courseGrid.appendChild(courseDiv);
            }

            pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages;

            initializeDragAndDrop(); // Reinitialize drag-and-drop functionality
          }

          function initializeDragAndDrop() {
            const courses = document.querySelectorAll(".course");

            courses.forEach(course => {
              course.addEventListener("dragstart", () => {
                course.classList.add("dragging");
              });

              course.addEventListener("dragend", () => {
                course.classList.remove("dragging");
              });
            });

            buckets.forEach(bucket => {
              bucket.addEventListener("dragover", e => {
                e.preventDefault();
                bucket.classList.add("over");
              });

              bucket.addEventListener("dragleave", () => {
                bucket.classList.remove("over");
              });

              bucket.addEventListener("drop", e => {
                e.preventDefault();
                const dragging = document.querySelector(".dragging");
                if (dragging) {
                  dragging.style.margin = "0 auto";
                  bucket.appendChild(dragging);
                }
                bucket.classList.remove("over");
              });
            });
          }

          levelFilter.addEventListener("change", () => {
            const selectedLevel = levelFilter.value;
            filteredIndices = courses.map((_, i) => i).filter(i => selectedLevel === "All" || levels[i] === selectedLevel);
            currentPage = 1; // Reset to the first page
            updatePage();
          });

          prevPageBtn.addEventListener("click", () => {
            if (currentPage > 1) {
              currentPage--;
              updatePage();
            }
          });

          nextPageBtn.addEventListener("click", () => {
            if (currentPage < Math.ceil(filteredIndices.length / coursesPerPage)) {
              currentPage++;
              updatePage();
            }
          });

          resetButton.addEventListener("click", () => {
            // Reset filters
            levelFilter.value = "All";
            filteredIndices = [...initialFilteredIndices];

            // Reset pagination
            currentPage = 1;

            // Clear buckets
            buckets.forEach((bucket, idx) => {
              bucket.innerHTML = initialBuckets[idx];
            });

            updatePage();
          });

          updatePage();
        });
        </script>
---

```{python}
#| echo: false
import pandas as pd
import glob
from IPython.display import HTML
import json

# Load courses data
file_list = glob.glob('../../data/gwdatasci-courses/courses.csv')
if not file_list:
    raise FileNotFoundError("courses.csv not found in the ../data/ directory.")
file_path = file_list[0]
df = pd.read_csv(file_path)

# Define pagination variables
courses_per_page = 8  # Number of courses per page

# Prepare course titles as a JSON string for the script
df_titles = df['title'].tolist()
course_list_json = str(df_titles).replace("'", "\"")  # Ensure valid JSON format

df_description = df['description'].tolist()
description_list_json = json.dumps(df_description).replace("'","")

# Prepare levels as a JSON string
df_levels = df['level'].tolist()
level_list_json = json.dumps(df_levels).replace("'", "")

# Generate the HTML
html = f"""
<div>
  <div style="font-style: italic; text-align: center;">
    <div>
    "I am a 
      <select id="level-filter" style = "text-align: center;">
        <option value="All">Level</option>
        <option value="undergraduate">Undergraduate</option>
        <option value="graduate">Graduate</option>
      </select>
      <select>
        <option> Path </option>
      </select>
      interested in learning about 
      <select>
        <option> Topic </option>
      </select>
      to land a job as a 
      <select>
        <option> Jobs </option>
      </select>
      "
    </div>
  </div>

  <div id="course-grid" data-courses-per-page="{courses_per_page}" data-total-courses="{len(df)}" data-course-list='{course_list_json}' 
      data-description-list='{description_list_json}' data-level-list='{level_list_json}'
       style="width: 100%; background-color: #f0f0f0; display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; padding: 1rem; box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);">
  </div>

  <!-- Pagination Controls -->
  <div id="pagination-controls" style="text-align: center; margin-top: 1rem;">
    <button id="prev-page" disabled>Previous</button>
    <span id="page-info">Page 1 of {(len(df) + courses_per_page - 1) // courses_per_page}</span>
    <button id="next-page">Next</button>
  </div>


  <div>
    <section class="buckets" style="display: flex; gap: 1rem; margin-top: 2rem;">
      <div id="bucket-S1" class="bucket" data-label="S1" 
           style="flex: 1; padding: 1rem; border: 1px solid #ccc; text-align: center; width: 200px; height: 300px; flex-direction: column; gap: 0.5rem; overflow: hidden;">S1</div>
      <div id="bucket-S2" class="bucket" data-label="S2" 
           style="flex: 1; padding: 1rem; border: 1px solid #ccc; text-align: center; width: 200px; height: 300px; flex-direction: column; gap: 0.5rem; overflow: hidden;">S2</div>
      <div id="bucket-S3" class="bucket" data-label="S3" 
           style="flex: 1; padding: 1rem; border: 1px solid #ccc; text-align: center; width: 200px; height: 300px; flex-direction: column; gap: 0.5rem; overflow: hidden;">S3</div>
      <div id="bucket-S4" class="bucket" data-label="S4" 
           style="flex: 1; padding: 1rem; border: 1px solid #ccc; text-align: center; width: 200px; height: 300px; flex-direction: column; gap: 0.5rem; overflow: hidden;">S4</div>
    </section>
  </div>

  <div style="display: flex; justify-content: center; align-items: center; height: 100px;">
    <button id="reset-button">Reset</button>
  </div>
</div>
"""

display(HTML(html))
```

